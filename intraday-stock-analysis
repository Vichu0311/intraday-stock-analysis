import yfinance as yf
import pandas as pd
import numpy as np
import ta
import streamlit as st
import plotly.graph_objects as go
import smtplib
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart

def fetch_stock_data(stock_symbol, period='1d', interval='5m'):
    """Fetch intraday stock data from Yahoo Finance"""
    stock_data = yf.download(stock_symbol, period=period, interval=interval)
    return stock_data

def calculate_indicators(data):
    """Calculate RSI, EMA, and MACD indicators for intraday trading"""
    data['RSI'] = ta.momentum.RSIIndicator(data['Close'], window=14).rsi()
    data['EMA_9'] = ta.trend.ema_indicator(data['Close'], window=9)
    data['EMA_21'] = ta.trend.ema_indicator(data['Close'], window=21)
    macd = ta.trend.MACD(data['Close'])
    data['MACD'] = macd.macd()
    data['MACD_Signal'] = macd.macd_signal()
    return data

def generate_intraday_signals(data):
    """Generate Buy and Sell signals based on intraday indicators"""
    buy_signals = []
    sell_signals = []
    
    for i in range(len(data)):
        if data['RSI'][i] < 30 and data['EMA_9'][i] > data['EMA_21'][i] and data['MACD'][i] > data['MACD_Signal'][i]:
            buy_signals.append(data['Close'][i])
            sell_signals.append(np.nan)
        elif data['RSI'][i] > 70 and data['EMA_9'][i] < data['EMA_21'][i] and data['MACD'][i] < data['MACD_Signal'][i]:
            sell_signals.append(data['Close'][i])
            buy_signals.append(np.nan)
        else:
            buy_signals.append(np.nan)
            sell_signals.append(np.nan)
    
    data['Buy_Signal'] = buy_signals
    data['Sell_Signal'] = sell_signals
    return data

def get_oversold_overbought_stocks(stock_list):
    """Fetch daily RSI data and filter oversold (<30) and overbought (>70) stocks"""
    oversold_stocks = []
    overbought_stocks = []
    
    for stock in stock_list:
        data = fetch_stock_data(stock, period='5d', interval='1d')
        if not data.empty:
            data = calculate_indicators(data)
            latest_rsi = data['RSI'].iloc[-1]
            
            if latest_rsi < 30:
                oversold_stocks.append((stock, latest_rsi))
            elif latest_rsi > 70:
                overbought_stocks.append((stock, latest_rsi))
    
    return oversold_stocks, overbought_stocks

def send_email_alert(oversold, overbought):
    """Send email alerts for oversold and overbought stocks"""
    sender_email = "your_email@gmail.com"  # Replace with your email
    receiver_email = "receiver_email@gmail.com"  # Replace with recipient's email
    password = "your_email_password"  # Replace with your email password
    
    subject = "Daily Stock Alert: Oversold & Overbought Stocks"
    body = """<h3>üì¢ Daily Stock Alerts</h3>
    <b>Oversold Stocks (RSI < 30):</b><br>"""
    
    if oversold:
        body += "<ul>" + "".join([f"<li>{stock} - RSI: {rsi:.2f}</li>" for stock, rsi in oversold]) + "</ul>"
    else:
        body += "No oversold stocks today.<br>"
    
    body += "<b>Overbought Stocks (RSI > 70):</b><br>"
    if overbought:
        body += "<ul>" + "".join([f"<li>{stock} - RSI: {rsi:.2f}</li>" for stock, rsi in overbought]) + "</ul>"
    else:
        body += "No overbought stocks today.<br>"
    
    message = MIMEMultipart()
    message['From'] = sender_email
    message['To'] = receiver_email
    message['Subject'] = subject
    message.attach(MIMEText(body, 'html'))
    
    try:
        server = smtplib.SMTP('smtp.gmail.com', 587)
        server.starttls()
        server.login(sender_email, password)
        server.sendmail(sender_email, receiver_email, message.as_string())
        server.quit()
        print("üì© Email alert sent successfully!")
    except Exception as e:
        print(f"‚ö†Ô∏è Email alert failed: {e}")

def main():
    st.set_page_config(page_title="Intraday Stock Analysis", layout="wide")
    st.title("üìà Intraday Stock Analysis and Buy/Sell Signal Indication")
    
    stock_symbol = st.text_input("Enter Stock Symbol (e.g., RELIANCE.NS):")
    if stock_symbol:
        with st.spinner('Fetching and analyzing stock data...'):
            data = fetch_stock_data(stock_symbol)
            data = calculate_indicators(data)
            data = generate_intraday_signals(data)
        
        st.subheader("Stock Data (Latest 5 Entries)")
        st.dataframe(data[['Close', 'RSI', 'EMA_9', 'EMA_21', 'MACD', 'MACD_Signal', 'Buy_Signal', 'Sell_Signal']].tail())
        
        st.subheader("Buy/Sell Signals")
        buy_signals = data[['Close', 'Buy_Signal', 'Sell_Signal']].dropna()
        st.dataframe(buy_signals.tail())
    
    st.subheader("üìå Daily Oversold & Overbought Stocks")
    stock_list = ['RELIANCE.NS', 'TCS.NS', 'HDFCBANK.NS', 'INFY.NS', 'SBIN.NS']
    oversold, overbought = get_oversold_overbought_stocks(stock_list)
    
    if oversold:
        st.write("### üü¢ Oversold Stocks (RSI < 30)")
        st.write(pd.DataFrame(oversold, columns=['Stock', 'RSI']))
    
    if overbought:
        st.write("### üî¥ Overbought Stocks (RSI > 70)")
        st.write(pd.DataFrame(overbought, columns=['Stock', 'RSI']))
    
    if st.button("üì© Send Email Alert"):
        send_email_alert(oversold, overbought)
        st.success("Email alert sent successfully!")

if __name__ == "__main__":
    main()
